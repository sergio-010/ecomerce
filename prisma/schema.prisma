// Prisma Schema para eCommerce SaaS
// Generador del cliente Prisma
generator client {
  provider = "prisma-client-js"
}

// Configuración de base de datos
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// MODELOS DE AUTENTICACIÓN
// ================================

// Modelo de Usuario
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones de autenticación
  accounts Account[]
  sessions Session[]

  // Relaciones del eCommerce
  orders        Order[]
  favoriteItems FavoriteItem[]
  cartItems     CartItem[]
  addresses     Address[]
  reviews       Review[]

  @@map("users")
}

// Cuentas de autenticación (OAuth, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Sesiones de usuario
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Tokens de verificación
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ================================
// MODELOS DE PRODUCTOS
// ================================

// Categorías de productos
model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  image       String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  // Subcategorías - auto-relación
  parentId      String?
  parent        Category?  @relation("CategorySubcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategorySubcategories")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  products Product[]
  banners  Banner[]

  @@map("categories")
}

// Productos
model Product {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String?
  price          Decimal  @db.Decimal(10, 2)
  comparePrice   Decimal? @db.Decimal(10, 2)
  sku            String?  @unique
  stock          Int      @default(0)
  isActive       Boolean  @default(true)
  isFeatured     Boolean  @default(false)
  isPromotion    Boolean  @default(false)
  weight         Decimal? @db.Decimal(8, 2)
  dimensions     String?
  tags           String? // Stored as comma-separated string
  seoTitle       String?
  seoDescription String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  images        ProductImage[]
  variants      ProductVariant[]
  orderItems    OrderItem[]
  favoriteItems FavoriteItem[]
  cartItems     CartItem[]
  reviews       Review[]

  @@map("products")
}

// Imágenes de productos
model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  sortOrder Int     @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Variantes de productos (tallas, colores, etc.)
model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  stock     Int      @default(0)
  sku       String?
  isActive  Boolean  @default(true)
  sortOrder Int      @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// ================================
// MODELOS DE PEDIDOS
// ================================

// Pedidos
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  subtotal    Decimal     @db.Decimal(10, 2)
  tax         Decimal     @db.Decimal(10, 2)
  shipping    Decimal     @db.Decimal(10, 2)
  discount    Decimal     @default(0) @db.Decimal(10, 2)
  total       Decimal     @db.Decimal(10, 2)
  currency    String      @default("USD")

  // Información de facturación y envío (JSON as string)
  billingAddress  String
  shippingAddress String

  // Información de pago
  paymentMethod String?
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?

  // Información de envío
  shippingMethod    String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?

  // Notas
  notes      String?
  adminNotes String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id])

  items OrderItem[]

  @@map("orders")
}

// Items de pedidos
model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  total    Decimal @db.Decimal(10, 2)

  // Información del producto al momento del pedido (JSON as string)
  productSnapshot String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// ================================
// MODELOS DE CARRITO Y FAVORITOS
// ================================

// Items del carrito
model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Items favoritos
model FavoriteItem {
  id String @id @default(cuid())

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorite_items")
}

// ================================
// MODELOS DE DIRECCIONES
// ================================

// Direcciones de usuarios
model Address {
  id         String      @id @default(cuid())
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean     @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// ================================
// MODELOS DE REVIEWS
// ================================

// Reseñas de productos
model Review {
  id         String  @id @default(cuid())
  rating     Int // 1-5 estrellas
  title      String?
  comment    String?
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// ================================
// MODELOS DE BANNERS Y PROMOCIONES
// ================================

// Banners promocionales
model Banner {
  id          String         @id @default(cuid())
  title       String
  description String?
  image       String
  link        String?
  isActive    Boolean        @default(true)
  startDate   DateTime?
  endDate     DateTime?
  position    BannerPosition @default(HERO)
  sortOrder   Int            @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones (opcional)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  @@map("banners")
}

// ================================
// MODELOS DE CONFIGURACIÓN
// ================================

// Configuraciones de la tienda
model StoreSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String // JSON as string

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("store_settings")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum BannerPosition {
  HERO
  CATEGORY
  SIDEBAR
  FOOTER
}
